# 12-11今日刷题：输入两个正整数m和n，求其最大公约数和最小公倍数。
# 程序提示：利用辗转相除法， 又名欧几里德算法（Euclidean algorithm）乃求两个正整数之最大公因子的算法。
# 它是已知最古老的算法， 其可追溯至公元前300年前。步骤如下：
# 用a除以b，得a÷b=q......r1(0≤r1)。若r1=0，则(a，b)=b；若r1≠0，则再用b除以r1，得b÷r1=q......r2 (0≤r2）.
# 若r2=0，则(a，b)=r1，若r2≠0，则继续用r1除以r2，……如此下去，直到能整除为止。其最后一个为被除数的余数的除数即为(a, b)。
# 例如：a=25,b=15，a/b=1......10,b/10=1......5,10/5=2.......0,最后一个为被除数余数的除数就是5,5就是所求最大公约数

def gcd(a, b):
	if a<b:
		a,b = b,a
	while b != 0:
		tem = a % b
		a = b
		b = tem
	return a

a = int(input("请输入一个数字:"))
b = int(input("请输入另外一个数字:"))
print('最大公约数为：',gcd(a,b))
